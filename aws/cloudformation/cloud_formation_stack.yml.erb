<%
require 'cdo/aws/cloudfront'
unless dry_run
  update_bootstrap_script.call
  update_certs.call unless cdn_enabled
end
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Resources:
  VPC: <%= lambda.call 'LookupStackOutputs', StackName: 'VPC' %>
  IAM: <%= lambda.call 'LookupStackOutputs', StackName: 'IAM' %>
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      SecurityGroups: ['Fn::GetAtt': [VPC, ELBSecurityGroup]]
      Subnets: <%=public_subnets%>
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [CookieBasedPolicy]
        - LoadBalancerPort: 443
          InstancePort: 80
          Protocol: HTTPS
          SSLCertificateId: <%=certificate_arn%>
          PolicyNames: [CookieBasedPolicy]
      HealthCheck:
        Target: HTTP:80/health_check.php
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
# Nonce value for AMI resources. Change this value to generate a new base AMI on the next CloudFormation update.
<% ami = 2 -%>
  AMIComplete<%=ami%>:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: AMI<%=ami%>
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
  WebServerAMI<%=ami%>:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT40M
        Count: 1
    Properties:
      ImageId: <%=image_id%>
      InstanceType: c4.8xlarge
      IamInstanceProfile: {'Fn::GetAtt': [IAM, FrontendInstanceProfile]}
      SecurityGroupIds: ['Fn::GetAtt': [VPC, FrontendSecurityGroup]]
      SubnetId: {'Fn::GetAtt': [VPC, Subnet<%=azs.first%>]}
      KeyName: <%=ssh_key_name%>
      InstanceInitiatedShutdownBehavior: terminate
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('ami_bootstrap.sh.erb',
          create_id: "WebServerAMI#{ami}",
          ami_id: "AMI#{ami}",
          complete_id: "AMIComplete#{ami}",
          node_name: 'fe-${INSTANCE_ID}',
          run_list: 'role[unmonitored-frontend]') %>
  AMI<%=ami%>: <%= lambda.call 'AMIManager',
    DependsOn: "WebServerAMI#{ami}",
    StackName: {Ref: 'AWS::StackName' },
    Region: {Ref: 'AWS::Region' },
    InstanceId: {Ref: "WebServerAMI#{ami}" } %>
  WebServer:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 12
        MinInstancesInService: 2
        PauseTime: PT60M
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier: <%=subnets%>
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: 1
      MaxSize: 12
      DesiredCapacity: 4
      HealthCheckType: ELB
      HealthCheckGracePeriod: 4000
      LoadBalancerNames: [Ref: LoadBalancer]
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: {Ref: WebServer}
      MetricAggregationType: Average
      MinAdjustmentMagnitude: 1
      EstimatedInstanceWarmup: 300
      PolicyType: StepScaling
      StepAdjustments:
        # 60-70% cpu, +20% instances
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 20
        # 70-80% cpu, +40% instances
        - MetricIntervalLowerBound: 10
          MetricIntervalUpperBound: 20
          ScalingAdjustment: 40
        # 80-90% cpu, +60% instances
        - MetricIntervalLowerBound: 20
          MetricIntervalUpperBound: 30
          ScalingAdjustment: 60
        # 90-100% cpu, +80% instances
        - MetricIntervalLowerBound: 30
          ScalingAdjustment: 80
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: {Ref: WebServer}
      MetricAggregationType: Average
      MinAdjustmentMagnitude: 1
      EstimatedInstanceWarmup: 300
      PolicyType: StepScaling
      StepAdjustments:
        # 50-40% cpu, -10% instances
        - MetricIntervalUpperBound: 0
          MetricIntervalLowerBound: -10
          ScalingAdjustment: -10
        # 40-30% cpu, -20% instances
        - MetricIntervalUpperBound: -10
          MetricIntervalLowerBound: -20
          ScalingAdjustment: -20
        # 30-20% cpu, -30% instances
        - MetricIntervalUpperBound: -20
          MetricIntervalLowerBound: -30
          ScalingAdjustment: -30
        # 20-10% cpu, -40% instances
        - MetricIntervalUpperBound: -30
          MetricIntervalLowerBound: -40
          ScalingAdjustment: -40
        # 10-0% cpu, -50% instances
        - MetricIntervalUpperBound: -40
          ScalingAdjustment: -50
  ScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if average CPU is greater than 60% for 10 minutes
      AlarmActions: [Ref: ScaleUpPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: {Ref: WebServer}
  ScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if average CPU is less than 50% for 20 minutes
      AlarmActions: [Ref: ScaleDownPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 4
      Threshold: 50
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: {Ref: WebServer}
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: AMIComplete<%=ami%>
    Properties:
      ImageId: {"Fn::GetAtt": [AMI<%=ami%>, ImageId]}
      InstanceType: <%=instance_type%>
      IamInstanceProfile: {'Fn::GetAtt': [IAM, FrontendInstanceProfile]}
      SecurityGroups: ['Fn::GetAtt': [VPC, FrontendSecurityGroup]]
      KeyName: <%=ssh_key_name%>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('chef_role_bootstrap.sh.erb',
          resource_id: 'WebServer',
          node_name: 'fe-${INSTANCE_ID}',
          run_list: 'role[front-end]')%>
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = "#{app == 'Dashboard' ? 'dashboard-' : ''}#{subdomain}"
-%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: <%=app_domain%>
          Type: A
          AliasTarget:
<%   if cdn_enabled -%>
            DNSName: {'Fn::GetAtt': [<%=app%>CDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
<%   else -%>
            DNSName: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneName]}
            HostedZoneId: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneNameID]}
<%   end -%>
<%   if cdn_enabled -%>
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%= AWS::CloudFront.config_cloudformation(
        app.downcase.to_sym,
        "origin-#{subdomain}",
        [app_domain],
        {
          IamCertificateId: iam_certificate_id,
          SslSupportMethod: 'sni-only',
          MinimumProtocolVersion: 'TLSv1'
        }
      )%>
<%   end -%>
<% end -%>
<% if cdn_enabled%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "origin-<%=subdomain%>"
          Type: A
          AliasTarget:
            HostedZoneId: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneNameID]}
            DNSName: {'Fn::GetAtt': [LoadBalancer, CanonicalHostedZoneName]}
<% end -%>
Outputs:
  DashboardURL:
    Value: "https://dashboard-<%=subdomain%>"
    Description: Dashboard URL
  PegasusURL:
    Value: "https://<%=subdomain%>"
    Description: Pegasus URL
